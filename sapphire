#!/usr/bin/env ruby
require 'http'
require 'json'
require 'optparse'
require 'ostruct'
require 'rubygems/package'
require 'colorize'
require 'fileutils'

# Set global url and path
version = "1.0"
package_upstream = 'https://jakeroggenbuck.github.io/sapphire/'
config_directory = '/home/jake/.config/sapphire/'

# Pull list and save it to the directory given as an arg
def update_list(url, directory)
  puts "Pulling " + url
  package_list = HTTP.get url
  # Saves the file to list.json
  if File.open(directory + 'list.json', 'w') { |file| file.write(package_list) }
    puts "Downloaded lits.json to ".green + directory.green
  end
end

# An Object for packages
class Package
  # Set some Object specific names and locations
  def initialize(name, config)
    @name = name
    @config = config + '/list.json'
    @stage_dir = '/tmp/' + @name.split("/")[-1]
  end
  def clone()
    if @name.include? "/"
      upstream_url = "https://github.com/" + @name
    else
      file = File.read(@config)
      data = JSON.parse(file)
      upstream_url = data[@name]["url"]
    end
    Dir.chdir('/tmp/')
    # Check if a stage directory exists
    if File.directory?(@stage_dir)
      # Removes the stage_dir
      FileUtils.rm_rf(@stage_dir)
    end
    # Makes a new stage dir
    Dir.mkdir @stage_dir
    Dir.chdir(@stage_dir)
    system("git clone " + upstream_url)
    clone_dir = Dir.glob('*').select { |f| File.path f }
    Dir.chdir(clone_dir[0])
  end
  def install()
    # Show install diffs in less if wanted
    print 'See diff? [Y/n] '
    get_diff = gets
    if get_diff.chomp == "Y" or get_diff.chomp == "y"
      system('less impulse.build')
    end
    # Finish install or don't run install script
    print 'Finish install? [Y/n] '
    finish_install = gets
    if finish_install.chomp == "Y" or finish_install.chomp == "y"
      if system('sudo sh impulse.build')
        puts 'Installed successfully'.green
      end
    end
  end
  def clean()
    FileUtils.rm_rf(@stage_dir)
  end
end

# Makes a local directory if one does not exist
def directory_exists(directory)
  unless File.directory?(directory)
    Dir.mkdir directory
  end
end

# Pulls the list if one does not exist locally
def list_exists(url, directory)
  unless File.file?(directory + 'list.json')
    update_list(url, directory)
  end
end

# Search the package list json for a package by name
def search_list(name, config)
  file = File.read(config)
  data = JSON.parse(file)
  packages = data.each { |x|
    if x[1]["name"] == name
      puts x[1]["name"].green + "\n-- " + x[1]["desc"].green
    else
      puts x[1]["name"] + "\n-- " + x[1]["desc"]
    end
  }
end

# Runs the check functions
directory_exists(config_directory)
list_exists(package_upstream + 'list.json', config_directory)

# Parse command line options when run
options = OpenStruct.new
OptionParser.new do |opt|
  opt.on('-U', '--update', 'Update list') { |o| options.update = o }
  opt.on('-S', '--search SEARCH', 'Search cached list') { |o| options.search = o }
  opt.on('-I', '--install INSTALL', 'Install package') { |o| options.install = o }
  opt.on('-v', '--version', 'Check version') { |o| options.version = o }
end.parse!

# If list update requested, update list
if options.update
  update_list(package_upstream + 'list.json', config_directory)
end

# Searches for a package given a name
if options.search
  search_list(options.search, config_directory + 'list.json')
end

if options.version
  puts "Sapphire Version " + version
end

# Creates new Package object and runs the methods
if options.install
  # Creates Object
  pack = Package.new(options.install, config_directory)
  pack.clone()
  pack.install()
  pack.clean()
end
